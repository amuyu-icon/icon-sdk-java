/*
 * Copyright 2018 ICON Foundation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Create the pom configuration:
def pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution "repo"
        }
    }

    scm {
        url POM_SCM_URL
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            groupId GROUP
            version VERSION_NAME
            artifactId POM_ARTIFACT_ID
            pom.withXml {
                def root = asNode()
                root.appendNode('name', POM_ARTIFACT_ID)
                root.appendNode('description', POM_DESCRIPTION)
                root.appendNode('url', POM_URL)
                root.children().last() + pomConfig

                // Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.compile.allDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                }
            }
        }
    }
}

def setExtraProperty(String key) {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    if (project.hasProperty(key))
        project.ext.set(key, bintrayUser)
    else if (properties.getProperty(key) == null)
        project.ext.set(key, System.getenv(key))
    else
        project.ext.set(key, properties.getProperty(key))
}


task bintrayKeySetting {
    setExtraProperty('bintrayUser')
    setExtraProperty('bintrayKey')
}

bintray {
    user = bintrayUser
    key = bintrayKey
    publications = ['mavenJava']
    publish true
    pkg {
        userOrg = BINTRAY_USER_ORG
        repo = BINTRAY_REPO
        name = BINTRAY_PKG_NAME

        version {
            name = project.version
            gpg {
                sign = true
            }
        }
    }
}